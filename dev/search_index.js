var documenterSearchIndex = {"docs":
[{"location":"#STSP.jl","page":"STSP.jl","title":"STSP.jl","text":"","category":"section"},{"location":"","page":"STSP.jl","title":"STSP.jl","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Index","page":"STSP.jl","title":"Index","text":"","category":"section"},{"location":"","page":"STSP.jl","title":"STSP.jl","text":"Pages = [\"index.md\"]","category":"page"},{"location":"","page":"STSP.jl","title":"STSP.jl","text":"Modules = [STSP]","category":"page"},{"location":"#STSP.AbstractCompConnexe","page":"STSP.jl","title":"STSP.AbstractCompConnexe","text":"Type abstrait dont d'autres types de composantes connexes dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractEdge","page":"STSP.jl","title":"STSP.AbstractEdge","text":"Type abstrait dont d'autres types d'arêtes dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractGraph","page":"STSP.jl","title":"STSP.AbstractGraph","text":"Type abstrait dont d'autres types de graphes dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractNode","page":"STSP.jl","title":"STSP.AbstractNode","text":"Type abstrait dont d'autres types de noeuds dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractPriorityItem","page":"STSP.jl","title":"STSP.AbstractPriorityItem","text":"Type abstrait pour les éléments de priorité.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.AbstractQueue","page":"STSP.jl","title":"STSP.AbstractQueue","text":"Type abstrait dont d'autres types de files dériveront.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Edge","page":"STSP.jl","title":"STSP.Edge","text":"Type représentant les arêtes d'un graphe.\n\nExemple:\n\n    edge = Edge(\"James\", 10, node1, node2)\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Graph","page":"STSP.jl","title":"STSP.Graph","text":"Type representant un graphe comme un ensemble de noeuds.\n\nExemple :\n\nnode1 = Node(\"Joe\", 3.14)\nnode2 = Node(\"Steve\", exp(1))\nnode3 = Node(\"Jill\", 4.12)\nG = Graph(\"Ick\", [node1, node2, node3], [edge1, edge2, edge3])\n\nAttention, tous les noeuds doivent avoir des données de même type.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Node","page":"STSP.jl","title":"STSP.Node","text":"Type représentant les noeuds d'un graphe.\n\nExemple:\n\n    noeud = Node(\"James\", [π, exp(1)])\n    noeud = Node(\"Kirk\", \"guitar\")\n    noeud = Node(\"Lars\", 2)\n\n\n\n\n\n","category":"type"},{"location":"#STSP.PriorityItem","page":"STSP.jl","title":"STSP.PriorityItem","text":"Type représentant un élément de priorité (mutable).\n\n\n\n\n\n","category":"type"},{"location":"#STSP.PriorityQueue","page":"STSP.jl","title":"STSP.PriorityQueue","text":"File de priorité.\n\n\n\n\n\n","category":"type"},{"location":"#STSP.Queue","page":"STSP.jl","title":"STSP.Queue","text":"Type représentant une file avec des éléments de type T.\n\n\n\n\n\n","category":"type"},{"location":"#Base.:==-Tuple{Edge, Edge}","page":"STSP.jl","title":"Base.:==","text":"Surcharge de l'égalité\n\n\n\n\n\n","category":"method"},{"location":"#Base.:==-Tuple{Node, Node}","page":"STSP.jl","title":"Base.:==","text":"Surcharge de l'égalité\n\n\n\n\n\n","category":"method"},{"location":"#Base.in-Tuple{Edge, Vector}","page":"STSP.jl","title":"Base.in","text":"Dit si une arête appartient à un ensemble d'arêtes\n\n\n\n\n\n","category":"method"},{"location":"#Base.isless-Tuple{PriorityItem, PriorityItem}","page":"STSP.jl","title":"Base.isless","text":"Définition de la méthode de comparaison pour PriorityItem.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{STSP.AbstractQueue}","page":"STSP.jl","title":"Base.length","text":"Donne le nombre d'éléments sur la file.\n\n\n\n\n\n","category":"method"},{"location":"#Base.popfirst!-Tuple{PriorityQueue}","page":"STSP.jl","title":"Base.popfirst!","text":"Retire et renvoie l'élément ayant la plus basse priorité (poids minimum).\n\n\n\n\n\n","category":"method"},{"location":"#Base.popfirst!-Tuple{STSP.AbstractQueue}","page":"STSP.jl","title":"Base.popfirst!","text":"Retire et renvoie l'objet du début de la file.\n\n\n\n\n\n","category":"method"},{"location":"#Base.push!-Union{Tuple{T}, Tuple{STSP.AbstractQueue{T}, T}} where T","page":"STSP.jl","title":"Base.push!","text":"Ajoute item à la fin de la file s.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{Graph}","page":"STSP.jl","title":"Base.show","text":"Affiche un graphe\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"Base.show","text":"Affiche un arête.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{STSP.AbstractNode}","page":"STSP.jl","title":"Base.show","text":"Affiche un noeud.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{STSP.AbstractQueue}","page":"STSP.jl","title":"Base.show","text":"Affiche une file.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Algorithme_HK-Tuple{Dict{Int64, Vector{Float64}}, Vector{Vector{Int64}}, Dict{Tuple{Int64, Int64}, Float64}, Int64, Int64, Float64}","page":"STSP.jl","title":"STSP.Algorithme_HK","text":"Algorithme_HK(graph_edges::Vector{Vector{Int64}}, edge_weights_dict::Dict{Tuple{Int64, Int64}, Float64}, racine::Int64, algo_Arbre_minimal::Int64)\n\nImplémente l'algorithme de Keld Helsgaun.\n\nArguments\n\ngraph_edges::Vector{Vector{Int64}}: Vecteur représentant les arêtes dans le graphe.\nedge_weights_dict::Dict{Tuple{Int64, Int64}, Float64}: Dictionnaire stockant les poids des arêtes du graphe.\nracine::Int64: Le nœud de départ.\nalgo_Arbre_minimal: Un entier (1:Kruskal, 2:Prim) qui indique la méthode pour trouver l'arbre de recouvrement minimal d'un graphe.\n\nRetourne\n\nUne liste contenant la tournée minimal du graphe du départ\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Algorithme_Prim-Tuple{Dict{Int64, Vector{Float64}}, Vector{Vector{Int64}}, Dict{Tuple{Int64, Int64}, Float64}, Int64}","page":"STSP.jl","title":"STSP.Algorithme_Prim","text":"Algorithme_Prim(graph_edges::Vector{Vector{Int64}}, edge_weights_dict::Dict{Tuple{Int64, Int64}, Float64}, start_node::Int64)\n\nImplémente l'algorithme de Prim pour trouver l'arbre de recouvrement minimal d'un graphe.\n\nArguments\n\ngraph_edges::Vector{Vector{Int64}}: Vecteur représentant les arêtes dans le graphe.\nedge_weights_dict::Dict{Tuple{Int64, Int64}, Float64}: Dictionnaire stockant les poids des arêtes du graphe.\nstart_node::Int64: Le nœud de départ de l'algorithme de Prim.\n\nRetourne\n\nUn tuple contenant l'arbre de recouvrement minimal et son poids total.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.Algortihme_Kruskal-Tuple{Vector{Vector{Int64}}, Dict{Tuple{Int64, Int64}, Float64}}","page":"STSP.jl","title":"STSP.Algortihme_Kruskal","text":"(graph_edges::Vector{Vector{Int64}}, edge_weights_dict::Dict{Tuple{Int64, Int64}, Float64})\n\n...\n\nArguments\n\ngraph_edges::Vector{Vector{Int64}}: Vecteur représentant les arêtes dans le graphe considéré\nedge_weights_dict::Dict{Tuple{Int64, Int64}, Float64}: Dictionnaire stockant les poids des arêtes du graphe considéré\n\n...\n\napplique l'algorithme de Kruskal afin de renvoyer l'arbre de recouvrement minimal et son poids.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_edge!-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Edge{T, S}}} where {T, S}","page":"STSP.jl","title":"STSP.add_edge!","text":"Ajoute un arete au graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_node!-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Node{T}}} where {T, S}","page":"STSP.jl","title":"STSP.add_node!","text":"Ajoute un noeud au graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.add_symmetry!-Tuple{Dict{Tuple{Int64, Int64}, Float64}}","page":"STSP.jl","title":"STSP.add_symmetry!","text":"Arguments\n\na::Dict{Tuple{Int64, Int64}, Float64}: Dictionnaire représentant les poids\n\nModifie\n\na::Dict{Tuple{Int64, Int64}, Float64} contenant l'ensemble des poids dans le graphe en prenant en compte les matrices adjacentes supérieures ou inférieures\n\n\n\n\n\n","category":"method"},{"location":"#STSP.affichage_RSL-Tuple{String, Int64, Int64}","page":"STSP.jl","title":"STSP.affichage_RSL","text":"(filename::String)\n\n...\n\nArguments\n\nfilename::String: Chemin du fichier au format .tsp stockant le graphe considéré\n\n...\n\nAffiche l'application de l'algorithme de Kruskal en rouge sur le graphe considéré.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.affichage_arbre_minimal_kruskal-Tuple{String}","page":"STSP.jl","title":"STSP.affichage_arbre_minimal_kruskal","text":"(filename::String)\n\n...\n\nArguments\n\nfilename::String: Chemin du fichier au format .tsp stockant le graphe considéré\n\n...\n\nAffiche l'application de l'algorithme de Kruskal en rouge sur le graphe considéré.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.affichage_arbre_minimal_prim-Tuple{String, Int64}","page":"STSP.jl","title":"STSP.affichage_arbre_minimal_prim","text":"(filename::String)\n\n...\n\nArguments\n\nfilename::String: Chemin du fichier au format .tsp stockant le graphe considéré\n\n...\n\nAffiche l'application de l'algorithme de Kruskal en rouge sur le graphe considéré.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.complete_graph_edges-Tuple{Any}","page":"STSP.jl","title":"STSP.complete_graph_edges","text":"Arguments\n\ngraph_edges::Vector{Vector{Int64}}: Vecteur représentant les arêtes dans le graphe.\n\nRetourne\n\ngraph_edges::Vector{Vector{Int64}} contenant l'ensemble des arêtes dans le graphe en prenant en compte les matrices adjacentes supérieures ou inférieures\n\n\n\n\n\n","category":"method"},{"location":"#STSP.data-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.data","text":"Renvoie le poids de l'arete.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.data-Tuple{STSP.AbstractNode}","page":"STSP.jl","title":"STSP.data","text":"Renvoie les données contenues dans le noeud.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.decalage-NTuple{4, Any}","page":"STSP.jl","title":"STSP.decalage","text":"decalage(removed_node_dict, removed_edge_vec, removed_weights_dict, racine)\n\nRéalise un décalage d'indice pour trouver un sous arbre de recouvrement minimal\n\nArguments\n\nremoved_node_dict: Dictionnaire contenant le sous graphe sans le noeud racine.\nremoved_edge_vec: Vecteur contenant les arêtes sans les arêtes avec le noeud racine.\nremoved_weights_dict: Dictionnaire contenant les poids des arêtes du sous graphe.\nracine::Int64: Le nœud de départ.\n\nRetourne\n\nremoved_node_dict_copy : Dictionnaire du sous graphe mais avec les indices décalées de 1.\nremoved_edge_vec_copy : Vecteur du sous graphe mais avec les indices décalées de 1.\nremoved_weights_dict_copy : Dictionanire du sous graphe mais avec les indices des arêtes décalées de 1.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.edges-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.edges","text":"Renvoie la liste des aretes du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.get_degree-Tuple{Node, Graph}","page":"STSP.jl","title":"STSP.get_degree","text":"Renvoie le degré d'un noeud\n\n\n\n\n\n","category":"method"},{"location":"#STSP.get_one_tree-Tuple{Dict{Int64, Vector{Float64}}, Vector{Vector{Int64}}, Dict{Tuple{Int64, Int64}, Float64}, Int64, Int64}","page":"STSP.jl","title":"STSP.get_one_tree","text":"get_one_tree(graph_edges::Vector{Vector{Int64}}, edge_weights_dict::Dict{Tuple{Int64, Int64}, Float64}, racine::Int64, algo_Arbre_minimal::Int64)\n\nImplémente la méthode pour trouver un 1-tree minimum avec la racine racine\n\nArguments\n\ngraph_edges::Vector{Vector{Int64}}: Vecteur représentant les arêtes dans le graphe.\nedge_weights_dict::Dict{Tuple{Int64, Int64}, Float64}: Dictionnaire stockant les poids des arêtes du graphe.\nracine::Int64: Le nœud de départ.\nalgo_Arbre_minimal: Un entier (1:Kruskal, 2:Prim) qui indique la méthode pour trouver l'arbre de recouvrement minimal d'un graphe.\n\nRetourne\n\nUn 1-tree minimum avec la racine racine\n\n\n\n\n\n","category":"method"},{"location":"#STSP.increment_edges-Union{Tuple{S}, Tuple{T}, Tuple{Array{Edge{T, S}, 1}, Any}} where {T, S}","page":"STSP.jl","title":"STSP.increment_edges","text":"Décalage pour les arêtes\n\n\n\n\n\n","category":"method"},{"location":"#STSP.increment_nodes-Union{Tuple{T}, Tuple{Array{Node{T}, 1}, Any}} where T","page":"STSP.jl","title":"STSP.increment_nodes","text":"Décalage pour les noeuds\n\n\n\n\n\n","category":"method"},{"location":"#STSP.is_empty-Tuple{STSP.AbstractQueue}","page":"STSP.jl","title":"STSP.is_empty","text":"Indique si la file est vide.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.n_nodes_to_read-Tuple{String, Int64, Int64}","page":"STSP.jl","title":"STSP.n_nodes_to_read","text":"Fonction auxiliaire de read_edges, qui détermine le nombre de noeud à lire en fonction de la structure du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.name-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.name","text":"Renvoie le nom de l'arete.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.name-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.name","text":"Renvoie le nom du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.name-Tuple{STSP.AbstractNode}","page":"STSP.jl","title":"STSP.name","text":"Renvoie le nom du noeud.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nb_edges-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.nb_edges","text":"Renvoie le nombre de aretes du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nb_nodes-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.nb_nodes","text":"Renvoie le nombre de noeuds du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.nodes-Tuple{STSP.AbstractGraph}","page":"STSP.jl","title":"STSP.nodes","text":"Renvoie la liste des noeuds du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.noeud_1-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.noeud_1","text":"Renvoie le noeud 1.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.noeud_2-Tuple{STSP.AbstractEdge}","page":"STSP.jl","title":"STSP.noeud_2","text":"Renvoie le noeud 2.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.one_tree!-Tuple{Graph, Graph, Node}","page":"STSP.jl","title":"STSP.one_tree!","text":"Construction d'un 1-tree à partir d'un arbre de recouvrement\n\n\n\n\n\n","category":"method"},{"location":"#STSP.parcours_preordre-Tuple{Dict{Int64, Vector{Int64}}, Int64, Vector{Int64}}","page":"STSP.jl","title":"STSP.parcours_preordre","text":"parcours_preordre(tree::Dict{Int64, Vector{Int64}}, node::Int64, visited::Vector{Int64})\n\nArguments\n\ntree::Dict{Int64, Vector{Int64}}: Un dictionnaire représentant l'arbre couvrant minimal. Chaque clé dans le dictionnaire est un nœud, et chaque valeur associée est un vecteur contenant les voisins connectés à ce nœud.\nnode::Int64::Dict{Tuple{Int64, Int64}, Float64}:  Le nœud de départ pour le parcours en préordre. \nvisited::Vector{Int64}: Un vecteur contenant les nœuds déjà visités dans l'ordre où ils ont été parcourus. \n\nModifie\n\nvisited::Vector{Int64}:  Ce vecteur est mis à jour à chaque appel récursif et contient l'ordre final des nœuds pour la tournée en préordre.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.plot_graph-Tuple{Any, Any}","page":"STSP.jl","title":"STSP.plot_graph","text":"Affiche un graphe étant données un ensemble de noeuds et d'arêtes.\n\nExemple :\n\ngraph_nodes, graph_edges = read_stsp(\"bayg29.tsp\")\nplot_graph(graph_nodes, graph_edges)\nsavefig(\"bayg29.pdf\")\n\n\n\n\n\n","category":"method"},{"location":"#STSP.plot_graph-Tuple{String}","page":"STSP.jl","title":"STSP.plot_graph","text":"Fonction de commodité qui lit un fichier stsp et trace le graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_edges-Tuple{Dict{String, String}, String}","page":"STSP.jl","title":"STSP.read_edges","text":"Analyse un fichier .tsp et renvoie l'ensemble des arêtes sous la forme d'un tableau.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_header-Tuple{String}","page":"STSP.jl","title":"STSP.read_header","text":"Analyse un fichier .tsp et renvoie un dictionnaire avec les données de l'entête.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_nodes-Tuple{Dict{String, String}, String}","page":"STSP.jl","title":"STSP.read_nodes","text":"Analyse un fichier .tsp et renvoie un dictionnaire des noeuds sous la forme {id => [x,y]}. Si les coordonnées ne sont pas données, un dictionnaire vide est renvoyé. Le nombre de noeuds est dans header[\"DIMENSION\"].\n\n\n\n\n\n","category":"method"},{"location":"#STSP.read_stsp-Tuple{String}","page":"STSP.jl","title":"STSP.read_stsp","text":"Renvoie les noeuds et les arêtes du graphe.\n\n\n\n\n\n","category":"method"},{"location":"#STSP.remove_edge!-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Edge{T, S}}} where {T, S}","page":"STSP.jl","title":"STSP.remove_edge!","text":"Supprime une arête du graphe\n\n\n\n\n\n","category":"method"},{"location":"#STSP.remove_node!-Union{Tuple{S}, Tuple{T}, Tuple{Graph{T, S}, Node{T}}} where {T, S}","page":"STSP.jl","title":"STSP.remove_node!","text":"Supprime un noeud du graphe\n\n\n\n\n\n","category":"method"},{"location":"#STSP.symetric-Tuple{Edge, Edge}","page":"STSP.jl","title":"STSP.symetric","text":"Dit si deux arêtes sont symétriques\n\n\n\n\n\n","category":"method"}]
}
